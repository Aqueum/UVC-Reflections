Starting a new reflection for lesson 2
I'd rather go free text, but they seem to like giving me questions...

What happens when you initialize a repository? Why do you need to do it?
	git adds a .git directory 
	which includes: the files HEAD config & description 
	& the directory's hooks objects branches description info & refs
	it doesn't actually add any commits so you need to use "git add" 
	then "git commit" to add initial commits.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
	the staging area is between the working directory and the repository, 
	containing files that we have decided to track
	(I'm still guessing the value, but think its something to do with being able 
	to limit commits to logical steps
	here there is no point in committing lesson 1 along with lesson 2, 
	so by having a staging area we can put only lesson 1's files in 
	while working on that, then we can add lesson 2's files 
	and remove lesson 1's from the staging area
	hence thereafter commits will only cover lesson 2)
	*** I have since learned that this isn't how git works: 
	you always add to the staging area before making a commit, 
	although the 'git commit -a' command seems to be able to combine add+commit
	
How can you use the staging area to make sure you have one commit 
per logical change?
	you can commit either a single file, or a bunch of files, 
	you only add the files that have changed 
	(where the change relates to a logical change)

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?
	Any significant development where the existing code base is still required 
	so that small bugs can be fixed on the main code - like working in a sandbox
	Or the creation and maintenance of special versions.
	Or just separating tasks & letting you focus on one aspect at once.

How do the diagrams help you visualize the branch structure?
	you can see the parents of each commit & each branch,
	so you can see what won't be included in any branch, where it branched 
	before the change

What is the result of merging two branches together? 	
	it's frickn amazing, lazers shooting from it's eyes AND
	it takes all the shared code between two commits adds any additions
	when compared with their common ancestor and doesn't add any deletions
Why do we represent it in the diagram the way we do?
	because its parents are both the commits that were merged 
	(so we point to them both)

What are the pros and cons of Gitâ€™s automatic merging 
vs. always doing merges manually?
	pros: automatic merging saves time on simple merges where edits made in 
	different areas
	cons: you may get frustrated that it can't do it all itself